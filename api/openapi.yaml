openapi: 3.1.0
info:
  title: Subinc Cost Management Microservice API
  version: "1.0"
  description: Production-grade API for multi-tenant SaaS cloud cost management. RBAC/ABAC endpoints included.
servers:
  - url: /api/v1
paths:
  /users:
    get:
      summary: List users
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      summary: Register user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegister"
      responses:
        "201":
          description: User registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /users/login:
    post:
      summary: User login
      tags: [Users]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        "200":
          description: JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
  /users/{id}:
    get:
      summary: Get user by ID
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    put:
      summary: Update user
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    delete:
      summary: Delete user
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: User deleted
  /users/{id}/roles:
    post:
      summary: Assign role to user
      tags: [Users, RBAC]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [role]
              properties:
                role:
                  type: string
      responses:
        "200":
          description: Roles updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    type: array
                    items:
                      type: string
  /users/{id}/roles/{role}:
    delete:
      summary: Remove role from user
      tags: [Users, RBAC]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: role
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Roles updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    type: array
                    items:
                      type: string
  /users/{id}/attributes:
    post:
      summary: Set user attribute
      tags: [Users, ABAC]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [key, value]
              properties:
                key:
                  type: string
                value:
                  type: string
      responses:
        "200":
          description: Attributes updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  attributes:
                    type: object
                    additionalProperties:
                      type: string
  /users/{id}/attributes/{key}:
    delete:
      summary: Remove user attribute
      tags: [Users, ABAC]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: key
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Attributes updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  attributes:
                    type: object
                    additionalProperties:
                      type: string
  /tenants:
    get:
      summary: List tenants
      tags: [Tenants]
      responses:
        "200":
          description: List of tenants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tenant"
  /tenants/{id}:
    get:
      summary: Get tenant by ID
      tags: [Tenants]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Tenant details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
    delete:
      summary: Delete tenant
      tags: [Tenants]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Tenant deleted
  /projects:
    post:
      summary: Create project
      tags: [Projects]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectCreate"
      responses:
        "201":
          description: Project created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
  /projects/{id}:
    get:
      summary: Get project by ID
      tags: [Projects]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Project details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
    put:
      summary: Update project
      tags: [Projects]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectUpdate"
      responses:
        "200":
          description: Project updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
    delete:
      summary: Delete project
      tags: [Projects]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Project deleted
  /tenants/{tenant_id}/projects:
    get:
      summary: List projects by tenant
      tags: [Projects]
      parameters:
        - in: path
          name: tenant_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
  /orgs/{org_id}/projects:
    get:
      summary: List projects by org
      tags: [Projects]
      parameters:
        - in: path
          name: org_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
  /cost/imports:
    get:
      summary: List cost imports
      tags: [Cost]
      parameters:
        - in: query
          name: tenant_id
          required: true
          schema:
            type: string
        - in: query
          name: provider
          schema:
            type: string
        - in: query
          name: account_id
          schema:
            type: string
      responses:
        "200":
          description: List of cost imports
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CostImport"
  /cost/imports/{id}:
    get:
      summary: Get cost import by ID
      tags: [Cost]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Cost import details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CostImport"
  /budgets:
    get:
      summary: List budgets
      tags: [Budgets]
      parameters:
        - in: query
          name: tenant_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of budgets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Budget"
  /budgets/{id}:
    get:
      summary: Get budget by ID
      tags: [Budgets]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Budget details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Budget"
  /anomalies:
    get:
      summary: List anomalies
      tags: [Anomalies]
      parameters:
        - in: query
          name: tenant_id
          required: true
          schema:
            type: string
        - in: query
          name: provider
          schema:
            type: string
        - in: query
          name: account_id
          schema:
            type: string
      responses:
        "200":
          description: List of anomalies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Anomaly"
  /anomalies/{id}:
    get:
      summary: Get anomaly by ID
      tags: [Anomalies]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Anomaly details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Anomaly"
  /billing/accounts:
    get:
      summary: List billing accounts
      tags: [Billing]
      parameters:
        - in: query
          name: tenant_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of billing accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BillingAccount"
  /billing/accounts/{id}:
    get:
      summary: Get billing account by ID
      tags: [Billing]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Billing account details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingAccount"
  /credits:
    get:
      summary: List credits
      tags: [Credits]
      parameters:
        - in: query
          name: account_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of credits
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Credit"
  /credits/{id}:
    get:
      summary: Get credit by ID
      tags: [Credits]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Credit details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credit"
  /refunds:
    get:
      summary: List refunds
      tags: [Refunds]
      parameters:
        - in: query
          name: payment_id
          schema:
            type: string
        - in: query
          name: invoice_id
          schema:
            type: string
      responses:
        "200":
          description: List of refunds
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Refund"
  /refunds/{id}:
    get:
      summary: Get refund by ID
      tags: [Refunds]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Refund details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Refund"
  /invoices:
    get:
      summary: List invoices
      tags: [Invoices]
      parameters:
        - in: query
          name: account_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of invoices
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Invoice"
  /invoices/{id}:
    get:
      summary: Get invoice by ID
      tags: [Invoices]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Invoice details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
  /payments:
    get:
      summary: List payments
      tags: [Payments]
      parameters:
        - in: query
          name: account_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of payments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Payment"
  /payments/{id}:
    get:
      summary: Get payment by ID
      tags: [Payments]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Payment details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
  /coupons:
    get:
      summary: List coupons
      tags: [Coupons]
      responses:
        "200":
          description: List of coupons
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Coupon"
  /coupons/{id}:
    get:
      summary: Get coupon by ID
      tags: [Coupons]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Coupon details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Coupon"
  /discounts:
    get:
      summary: List discounts
      tags: [Discounts]
      responses:
        "200":
          description: List of discounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Discount"
  /discounts/{id}:
    get:
      summary: Get discount by ID
      tags: [Discounts]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Discount details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Discount"
  /webhook-events:
    get:
      summary: List webhook events
      tags: [Webhooks]
      responses:
        "200":
          description: List of webhook events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebhookEvent"
  /webhook-events/{id}:
    get:
      summary: Get webhook event by ID
      tags: [Webhooks]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Webhook event details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookEvent"
  /provisioning/terraform:
    post:
      summary: Enqueue a Terraform provision job
      tags: [Provisioning, Terraform]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProvisionRequest"
      responses:
        "202":
          description: Provision job accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvisionStatus"
    get:
      summary: List all Terraform provision jobs
      tags: [Provisioning, Terraform]
      parameters:
        - in: query
          name: tenant_id
          required: true
          schema:
            type: string
        - in: query
          name: org_id
          required: true
          schema:
            type: string
        - in: query
          name: project_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of provision jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProvisionStatus"
  /provisioning/terraform/{id}:
    get:
      summary: Get status of a Terraform provision job
      tags: [Provisioning, Terraform]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Provision job status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvisionStatus"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /provisioning/terraform/{id}/cancel:
    post:
      summary: Cancel a Terraform provision job
      tags: [Provisioning, Terraform]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Job cancelled
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /architecture/docs:
    get:
      summary: List architecture docs
      tags: [Architecture]
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: List of architecture docs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ArchitectureDoc"
    post:
      summary: Generate architecture doc
      tags: [Architecture]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenerateDocRequest"
      responses:
        "201":
          description: Doc generated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArchitectureDoc"
  /architecture/docs/{id}:
    get:
      summary: Get architecture doc
      tags: [Architecture]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Architecture doc
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArchitectureDoc"
        "404":
          description: Not found
  /architecture/diagrams:
    get:
      summary: List architecture diagrams
      tags: [Architecture]
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: List of diagrams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ArchitectureDiagram"
    post:
      summary: Generate architecture diagram
      tags: [Architecture]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenerateDiagramRequest"
      responses:
        "201":
          description: Diagram generated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArchitectureDiagram"
  /architecture/diagrams/{id}:
    get:
      summary: Get architecture diagram
      tags: [Architecture]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Architecture diagram
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArchitectureDiagram"
        "404":
          description: Not found
  /optimization/recommendations:
    post:
      summary: Generate optimization recommendations
      description: Returns actionable, explainable recommendations for cost, performance, and security using OpenAI and cloud-native engines.
      tags: [Optimization]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OptimizationRequest"
      responses:
        "200":
          description: List of recommendations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimizationResponse"
  /optimization/recommendations/{id}:
    get:
      summary: Get a specific optimization recommendation
      tags: [Optimization]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Recommendation detail
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimizationRecommendation"
  /optimization/history:
    get:
      summary: List past optimization recommendations
      tags: [Optimization]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: tenant_id
          schema:
            type: string
        - in: query
          name: project_id
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: offset
          schema:
            type: integer
      responses:
        "200":
          description: List of past recommendations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptimizationHistoryResponse"
  /admin/audit:
    get:
      summary: List/search/export admin audit logs
      tags: [Admin, Audit]
      parameters:
        - in: query
          name: actor_id
          schema:
            type: string
          description: Filter by actor (admin user ID)
        - in: query
          name: action
          schema:
            type: string
          description: Filter by action type
        - in: query
          name: resource
          schema:
            type: string
          description: Filter by resource
        - in: query
          name: start
          schema:
            type: string
            format: date-time
          description: Filter logs created after this time (ISO8601)
        - in: query
          name: end
          schema:
            type: string
            format: date-time
          description: Filter logs created before this time (ISO8601)
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
          description: Max results per page
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Offset for pagination
        - in: query
          name: export
          schema:
            type: string
            enum: [csv, json]
            default: json
          description: Export format (csv or json)
      responses:
        "200":
          description: List of audit logs or exported file
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  logs:
                    type: array
                    items:
                      $ref: "#/components/schemas/AuditLog"
            text/csv:
              schema:
                type: string
                format: binary
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /admin/notifications:
    get:
      summary: List admin notifications
      tags: [Admin, Notifications]
      parameters:
        - in: query
          name: recipient
          schema:
            type: string
          description: Filter by recipient (user/admin email or ID)
        - in: query
          name: type
          schema:
            type: string
            enum: [system, security, billing, email, sms, push, webhook]
          description: Filter by notification type
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, sent, failed]
          description: Filter by status
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
          description: Max results per page
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Offset for pagination
      responses:
        "200":
          description: List of notifications
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  notifications:
                    type: array
                    items:
                      $ref: "#/components/schemas/Notification"
    post:
      summary: Send admin notification
      tags: [Admin, Notifications]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationInput"
      responses:
        "201":
          description: Notification created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notification"
  /admin/notifications/{id}:
    get:
      summary: Get admin notification by ID
      tags: [Admin, Notifications]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Notification details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notification"
    patch:
      summary: Mark notification as sent
      tags: [Admin, Notifications]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [sent_at]
              properties:
                sent_at:
                  type: string
                  format: date-time
      responses:
        "200":
          description: Notification updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notification"
  /admin/api-keys:
    get:
      summary: List API keys
      tags: [Admin, API Keys]
      parameters:
        - in: query
          name: user_id
          schema:
            type: string
          description: Filter by user ID
        - in: query
          name: status
          schema:
            type: string
            enum: [active, revoked]
          description: Filter by status
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
          description: Max results per page
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Offset for pagination
      responses:
        "200":
          description: List of API keys
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  api_keys:
                    type: array
                    items:
                      $ref: "#/components/schemas/APIKey"
    post:
      summary: Create API key
      tags: [Admin, API Keys]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id, name]
              properties:
                user_id:
                  type: string
                name:
                  type: string
      responses:
        "201":
          description: API key created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIKey"
  /admin/api-keys/{id}:
    get:
      summary: Get API key details
      tags: [Admin, API Keys]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: API key details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIKey"
    put:
      summary: Update API key (name only)
      tags: [Admin, API Keys]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
      responses:
        "200":
          description: API key updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIKey"
    delete:
      summary: Revoke API key
      tags: [Admin, API Keys]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: API key revoked
  /admin/api-keys/{id}/rotate:
    post:
      summary: Rotate API key
      tags: [Admin, API Keys]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: API key rotated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIKey"
  /admin/api-keys/audit:
    get:
      summary: Audit API key usage
      tags: [Admin, API Keys]
      parameters:
        - in: query
          name: api_key_id
          schema:
            type: string
          description: Filter by API key ID
        - in: query
          name: user_id
          schema:
            type: string
          description: Filter by user ID
        - in: query
          name: action
          schema:
            type: string
          description: Filter by action (create, revoke, rotate, use)
        - in: query
          name: start
          schema:
            type: string
            format: date-time
          description: Filter logs created after this time (ISO8601)
        - in: query
          name: end
          schema:
            type: string
            format: date-time
          description: Filter logs created before this time (ISO8601)
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
          description: Max results per page
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Offset for pagination
      responses:
        "200":
          description: List of API key audit logs
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  logs:
                    type: array
                    items:
                      $ref: "#/components/schemas/APIKeyAuditLog"
  /admin/rate-limits:
    get:
      summary: Get admin rate limit configuration and status
      tags: [Admin, Rate Limits]
      responses:
        "200":
          description: Current rate limit config and status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RateLimitConfig"
    patch:
      summary: Update admin rate limit configuration
      tags: [Admin, Rate Limits]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RateLimitConfigInput"
      responses:
        "200":
          description: Updated rate limit config
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RateLimitConfig"
  /admin/secrets:
    get:
      summary: Get secrets status
      tags: [Admin, Secrets]
      responses:
        "200":
          description: Current secrets status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecretsStatus"
    patch:
      summary: Rotate or update secrets
      tags: [Admin, Secrets]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SecretsUpdateInput"
      responses:
        "200":
          description: Updated secrets status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecretsStatus"
  /admin/system/maintenance:
    get:
      summary: Get maintenance mode status
      tags: [Admin, Maintenance]
      responses:
        "200":
          description: Current maintenance mode status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceModeStatus"
    patch:
      summary: Set maintenance mode status
      tags: [Admin, Maintenance]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MaintenanceModeInput"
      responses:
        "200":
          description: Updated maintenance mode status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceModeStatus"
  /admin/monitoring:
    get:
      summary: Get real-time monitoring configuration and status
      tags: [Admin, Monitoring]
      responses:
        "200":
          description: Current monitoring config and status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitoringConfig"
    patch:
      summary: Update real-time monitoring configuration
      tags: [Admin, Monitoring]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MonitoringConfigInput"
      responses:
        "200":
          description: Updated monitoring config
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitoringConfig"
  /admin/system/flags:
    get:
      summary: List feature flags
      tags: [Admin, Feature Flags]
      responses:
        "200":
          description: List of feature flags
          content:
            application/json:
              schema:
                type: object
                properties:
                  flags:
                    type: array
                    items:
                      $ref: "#/components/schemas/FeatureFlag"
    post:
      summary: Create feature flag
      tags: [Admin, Feature Flags]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FeatureFlagInput"
      responses:
        "201":
          description: Feature flag created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeatureFlag"
    patch:
      summary: Update feature flag
      tags: [Admin, Feature Flags]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FeatureFlagInput"
      responses:
        "200":
          description: Feature flag updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeatureFlag"
    delete:
      summary: Delete feature flag
      tags: [Admin, Feature Flags]
      parameters:
        - in: query
          name: flag
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Feature flag deleted
  /admin/system/config:
    get:
      summary: List system configs
      tags: [Admin, System Config]
      responses:
        "200":
          description: List of system configs
          content:
            application/json:
              schema:
                type: object
                properties:
                  config:
                    type: array
                    items:
                      $ref: "#/components/schemas/SystemConfig"
    post:
      summary: Create system config
      tags: [Admin, System Config]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SystemConfigInput"
      responses:
        "201":
          description: System config created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemConfig"
    patch:
      summary: Update system config
      tags: [Admin, System Config]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SystemConfigInput"
      responses:
        "200":
          description: System config updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemConfig"
    delete:
      summary: Delete system config
      tags: [Admin, System Config]
      parameters:
        - in: query
          name: key
          required: true
          schema:
            type: string
      responses:
        "204":
          description: System config deleted
  /admin/pricing:
    get:
      summary: List/search pricing rules
      tags: [Admin, Pricing]
      parameters:
        - in: query
          name: tenant_id
          schema:
            type: string
          description: Filter by tenant
        - in: query
          name: plan
          schema:
            type: string
          description: Filter by plan
        - in: query
          name: feature
          schema:
            type: string
          description: Filter by feature
        - in: query
          name: currency
          schema:
            type: string
          description: Filter by currency
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
          description: Max results per page
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Offset for pagination
      responses:
        "200":
          description: List of pricing rules
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  pricing:
                    type: array
                    items:
                      $ref: "#/components/schemas/PricingRule"
    post:
      summary: Create pricing rule
      tags: [Admin, Pricing]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PricingRuleInput"
      responses:
        "201":
          description: Pricing rule created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PricingRule"
    patch:
      summary: Update pricing rule
      tags: [Admin, Pricing]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PricingRuleInput"
      responses:
        "200":
          description: Pricing rule updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PricingRule"
    delete:
      summary: Delete pricing rule
      tags: [Admin, Pricing]
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Pricing rule deleted
  /admin/subscriptions:
    get:
      summary: List/search subscriptions
      tags: [Admin, Subscriptions]
      parameters:
        - in: query
          name: tenant_id
          schema:
            type: string
          description: Filter by tenant
        - in: query
          name: plan
          schema:
            type: string
          description: Filter by plan
        - in: query
          name: status
          schema:
            type: string
            enum: [active, cancelled, past_due, trialing]
          description: Filter by status
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
          description: Max results per page
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Offset for pagination
      responses:
        "200":
          description: List of subscriptions
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  subscriptions:
                    type: array
                    items:
                      $ref: "#/components/schemas/Subscription"
    post:
      summary: Create subscription
      tags: [Admin, Subscriptions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubscriptionInput"
      responses:
        "201":
          description: Subscription created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
  /admin/subscriptions/{id}:
    patch:
      summary: Update subscription
      tags: [Admin, Subscriptions]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubscriptionInput"
      responses:
        "200":
          description: Subscription updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
    delete:
      summary: Cancel subscription
      tags: [Admin, Subscriptions]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Subscription cancelled
  /health:
    get:
      summary: Health check
      tags: [Health]
      responses:
        "200":
          description: Service health
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  service:
                    type: string
  /cost/costs/{id}:
    get:
      summary: Get cost by ID
      tags: [Cost]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Cost record
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cost"
        "404":
          description: Not found
  /cost/costs/query:
    post:
      summary: Query costs
      tags: [Cost]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CostQuery"
      responses:
        "200":
          description: List of costs
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Cost"
                  total_count:
                    type: integer
                  page:
                    type: integer
                  page_size:
                    type: integer
  /cost/costs/summary:
    get:
      summary: Get cost summary
      tags: [Cost]
      responses:
        "200":
          description: Cost summary
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CostSummary"
  /cost/costs/imports:
    post:
      summary: Import cost data
      tags: [Cost]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportRequest"
      responses:
        "201":
          description: Import started
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportResponse"
    get:
      summary: List cost imports
      tags: [Cost]
      responses:
        "200":
          description: List of cost imports
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CostImport"
  /cost/costs/imports/{id}:
    get:
      summary: Get cost import status
      tags: [Cost]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Import status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportResponse"
  /cost/costs/budgets:
    post:
      summary: Create budget
      tags: [Budgets]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BudgetInput"
      responses:
        "201":
          description: Budget created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Budget"
    get:
      summary: List budgets
      tags: [Budgets]
      responses:
        "200":
          description: List of budgets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Budget"
  /cost/costs/budgets/{id}:
    get:
      summary: Get budget by ID
      tags: [Budgets]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Budget details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Budget"
    put:
      summary: Update budget
      tags: [Budgets]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BudgetInput"
      responses:
        "200":
          description: Budget updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Budget"
    delete:
      summary: Delete budget
      tags: [Budgets]
      responses:
        "204":
          description: Budget deleted
  /cost/costs/anomalies:
    get:
      summary: List anomalies
      tags: [Anomalies]
      responses:
        "200":
          description: List of anomalies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Anomaly"
    post:
      summary: Detect anomalies
      tags: [Anomalies]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DetectRequest"
      responses:
        "200":
          description: Anomaly detection result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnomalyDetectionResult"
  /cost/costs/anomalies/{id}:
    get:
      summary: Get anomaly by ID
      tags: [Anomalies]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Anomaly details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Anomaly"
    put:
      summary: Update anomaly
      tags: [Anomalies]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnomalyUpdate"
      responses:
        "200":
          description: Anomaly updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Anomaly"
  /cost/costs/forecasts:
    post:
      summary: Generate forecast
      tags: [Forecasts]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForecastRequest"
      responses:
        "200":
          description: Forecast generated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Forecast"
    get:
      summary: Get forecast
      tags: [Forecasts]
      responses:
        "200":
          description: Forecast data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Forecast"
  /cost/cloud/providers:
    get:
      summary: List all supported cloud providers
      tags: [Cloud]
      responses:
        "200":
          description: List of providers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvidersResponse"
  /cost/cloud/providers/{provider}:
    get:
      summary: Get provider info
      tags: [Cloud]
      parameters:
        - in: path
          name: provider
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Provider info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProviderInfoResponse"
  /cost/cloud/integrations:
    post:
      summary: Create integration
      tags: [Cloud]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIntegrationRequest"
      responses:
        "201":
          description: Integration created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IntegrationResponse"
    get:
      summary: List integrations
      tags: [Cloud]
      responses:
        "200":
          description: List of integrations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IntegrationsResponse"
  /cost/cloud/integrations/{id}:
    get:
      summary: Get integration
      tags: [Cloud]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Integration details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IntegrationResponse"
    put:
      summary: Update integration
      tags: [Cloud]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateIntegrationRequest"
      responses:
        "200":
          description: Integration updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IntegrationResponse"
    delete:
      summary: Delete integration
      tags: [Cloud]
      responses:
        "204":
          description: Integration deleted
  /cost/cloud/integrations/{id}/validate:
    post:
      summary: Validate integration
      tags: [Cloud]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateIntegrationRequest"
      responses:
        "200":
          description: Validation result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationResponse"
  /cost/cloud/integrations/{id}/accounts:
    get:
      summary: List accounts for integration
      tags: [Cloud]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of accounts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountsResponse"
  /cost/cloud/integrations/{id}/accounts/default:
    put:
      summary: Set default account
      tags: [Cloud]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetDefaultAccountRequest"
      responses:
        "200":
          description: Default account set
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
  /cost/cloud/import:
    post:
      summary: Import cost data from cloud
      tags: [Cloud]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportCostDataRequest"
      responses:
        "201":
          description: Import started
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportResponse"
  /admin/users:
    get:
      summary: List users
      tags: [Admin, Users]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/AdminUser"
    post:
      summary: Create user
      tags: [Admin, Users]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminUserInput"
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminUser"
  /admin/users/{id}:
    put:
      summary: Update user
      tags: [Admin, Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminUserInput"
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminUser"
    delete:
      summary: Delete user
      tags: [Admin, Users]
      responses:
        "204":
          description: User deleted
  /admin/tenants:
    get:
      summary: List tenants
      tags: [Admin, Tenants]
      responses:
        "200":
          description: List of tenants
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  tenants:
                    type: array
                    items:
                      $ref: "#/components/schemas/AdminTenant"
    post:
      summary: Create tenant
      tags: [Admin, Tenants]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminTenantInput"
      responses:
        "201":
          description: Tenant created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminTenant"
  /admin/tenants/{id}:
    put:
      summary: Update tenant
      tags: [Admin, Tenants]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminTenantInput"
      responses:
        "200":
          description: Tenant updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminTenant"
    delete:
      summary: Delete tenant
      tags: [Admin, Tenants]
      responses:
        "204":
          description: Tenant deleted
  /admin/roles:
    get:
      summary: List roles
      tags: [Admin, Roles]
      responses:
        "200":
          description: List of roles
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  roles:
                    type: array
                    items:
                      $ref: "#/components/schemas/AdminRole"
    post:
      summary: Create role
      tags: [Admin, Roles]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminRoleInput"
      responses:
        "201":
          description: Role created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminRole"
  /admin/roles/{id}:
    put:
      summary: Update role
      tags: [Admin, Roles]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminRoleInput"
      responses:
        "200":
          description: Role updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminRole"
    delete:
      summary: Delete role
      tags: [Admin, Roles]
      responses:
        "204":
          description: Role deleted
  /admin/permissions:
    get:
      summary: List permissions
      tags: [Admin, Permissions]
      responses:
        "200":
          description: List of permissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  permissions:
                    type: array
                    items:
                      $ref: "#/components/schemas/AdminPermission"
    post:
      summary: Create permission
      tags: [Admin, Permissions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminPermissionInput"
      responses:
        "201":
          description: Permission created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminPermission"
  /admin/permissions/{id}:
    put:
      summary: Update permission
      tags: [Admin, Permissions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminPermissionInput"
      responses:
        "200":
          description: Permission updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminPermission"
    delete:
      summary: Delete permission
      tags: [Admin, Permissions]
      responses:
        "204":
          description: Permission deleted
  /admin/sessions:
    get:
      summary: List admin sessions
      tags: [Admin, Sessions]
      responses:
        "200":
          description: List of sessions
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  sessions:
                    type: array
                    items:
                      $ref: "#/components/schemas/AdminSession"
  /admin/sessions/revoke/user:
    post:
      summary: Revoke all sessions for a user
      tags: [Admin, Sessions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id]
              properties:
                user_id:
                  type: string
      responses:
        "200":
          description: Sessions revoked
          content:
            application/json:
              schema:
                type: object
                properties:
                  revoked:
                    type: integer
  /admin/sessions/revoke/tenant:
    post:
      summary: Revoke all sessions for a tenant
      tags: [Admin, Sessions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [tenant_id]
              properties:
                tenant_id:
                  type: string
      responses:
        "200":
          description: Sessions revoked
          content:
            application/json:
              schema:
                type: object
                properties:
                  revoked:
                    type: integer
  /admin/mfa/enable:
    post:
      summary: Enable MFA for a user
      tags: [Admin, MFA]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id]
              properties:
                user_id:
                  type: string
      responses:
        "200":
          description: MFA enabled
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
  /admin/mfa/disable:
    post:
      summary: Disable MFA for a user
      tags: [Admin, MFA]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id]
              properties:
                user_id:
                  type: string
      responses:
        "200":
          description: MFA disabled
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
  /admin/mfa/reset:
    post:
      summary: Reset MFA for a user
      tags: [Admin, MFA]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id]
              properties:
                user_id:
                  type: string
      responses:
        "200":
          description: MFA reset
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
  /admin/mfa/status/{user_id}:
    get:
      summary: Get MFA status for a user
      tags: [Admin, MFA]
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: MFA status
          content:
            application/json:
              schema:
                type: object
                properties:
                  enabled:
                    type: boolean
                  last_reset:
                    type: string
                    format: date-time
  /admin/impersonate:
    post:
      summary: Impersonate a user
      tags: [Admin, Support]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id]
              properties:
                user_id:
                  type: string
      responses:
        "200":
          description: Impersonation started
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
  /admin/support/tools:
    get:
      summary: Get support tools
      tags: [Admin, Support]
      responses:
        "200":
          description: Support tools
          content:
            application/json:
              schema:
                type: object
                properties:
                  tools:
                    type: array
                    items:
                      type: string
  /admin/support/user-trace:
    get:
      summary: Trace user activity
      tags: [Admin, Support]
      parameters:
        - in: query
          name: user_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User trace
          content:
            application/json:
              schema:
                type: object
                properties:
                  trace:
                    type: array
                    items:
                      type: object
  /admin/support/billing-trace:
    get:
      summary: Trace billing activity
      tags: [Admin, Support]
      parameters:
        - in: query
          name: account_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Billing trace
          content:
            application/json:
              schema:
                type: object
                properties:
                  trace:
                    type: array
                    items:
                      type: object
  /admin/support/impersonation-audit:
    get:
      summary: List impersonation audit logs
      tags: [Admin, Support]
      responses:
        "200":
          description: List of impersonation audit logs
          content:
            application/json:
              schema:
                type: object
                properties:
                  logs:
                    type: array
                    items:
                      type: object
  /admin/rbac:
    get:
      summary: Get RBAC status
      tags: [Admin, RBAC]
      responses:
        "200":
          description: RBAC status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
  /admin/delegated-admin:
    get:
      summary: Get delegated admin status
      tags: [Admin, Delegated Admin]
      responses:
        "200":
          description: Delegated admin status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
  /admin/scim:
    get:
      summary: Get SCIM status
      tags: [Admin, SCIM]
      responses:
        "200":
          description: SCIM status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
  /admin/audit/anomaly:
    get:
      summary: List audit anomalies
      tags: [Admin, Audit]
      responses:
        "200":
          description: List of audit anomalies
          content:
            application/json:
              schema:
                type: object
                properties:
                  anomalies:
                    type: array
                    items:
                      type: object
  /admin/alerts:
    get:
      summary: List admin alerts
      tags: [Admin, Alerts]
      responses:
        "200":
          description: List of alerts
          content:
            application/json:
              schema:
                type: object
                properties:
                  alerts:
                    type: array
                    items:
                      type: object
  /admin/abuse:
    get:
      summary: Get abuse detection status
      tags: [Admin, Abuse]
      responses:
        "200":
          description: Abuse detection status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
  /admin/policies:
    get:
      summary: List admin policies
      tags: [Admin, Policies]
      responses:
        "200":
          description: List of policies
          content:
            application/json:
              schema:
                type: object
                properties:
                  policies:
                    type: array
                    items:
                      type: object
    post:
      summary: Create admin policy
      tags: [Admin, Policies]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "201":
          description: Policy created
          content:
            application/json:
              schema:
                type: object
  /admin/policies/{id}:
    get:
      summary: Get admin policy
      tags: [Admin, Policies]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Policy details
          content:
            application/json:
              schema:
                type: object
    put:
      summary: Update admin policy
      tags: [Admin, Policies]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Policy updated
          content:
            application/json:
              schema:
                type: object
    delete:
      summary: Delete admin policy
      tags: [Admin, Policies]
      responses:
        "204":
          description: Policy deleted
  /admin/roles/{id}/permissions:
    post:
      summary: Assign permission to role
      tags: [Admin, Roles, Permissions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [perm_id]
              properties:
                perm_id:
                  type: string
      responses:
        "200":
          description: Permission assigned
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
  /admin/roles/{id}/permissions/{perm_id}:
    delete:
      summary: Remove permission from role
      tags: [Admin, Roles, Permissions]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: perm_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Permission removed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
  /cost/analytics/tenant/{tenant_id}:
    get:
      summary: Get cost analytics for a tenant
      tags: [Cost, Analytics]
      parameters:
        - in: path
          name: tenant_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Tenant cost analytics
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CostAnalytics"
  /cost/analytics/project/{project_id}:
    get:
      summary: Get cost analytics for a project
      tags: [Cost, Analytics]
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Project cost analytics
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CostAnalytics"
  /cost/analytics/org/{org_id}:
    get:
      summary: Get cost analytics for an org
      tags: [Cost, Analytics]
      parameters:
        - in: path
          name: org_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Org cost analytics
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CostAnalytics"
  /cloud/accounts/link:
    post:
      summary: Link a cloud account
      tags: [Cloud]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CloudAccountLinkRequest"
      responses:
        "201":
          description: Cloud account linked
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudAccount"
  /cloud/accounts/{id}/unlink:
    post:
      summary: Unlink a cloud account
      tags: [Cloud]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Cloud account unlinked
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
  /webhooks:
    post:
      summary: Register a webhook
      tags: [Webhooks]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookRegisterRequest"
      responses:
        "201":
          description: Webhook registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookEvent"
    get:
      summary: List registered webhooks
      tags: [Webhooks]
      responses:
        "200":
          description: List of webhooks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebhookEvent"
  /webhooks/{id}:
    delete:
      summary: Delete a webhook
      tags: [Webhooks]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Webhook deleted
  /webhooks/{id}/test:
    post:
      summary: Test a webhook
      tags: [Webhooks]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Webhook test result
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  response:
                    type: string
  /admin/audit/export:
    get:
      summary: Export audit logs
      tags: [Admin, Audit]
      parameters:
        - in: query
          name: format
          schema:
            type: string
            enum: [csv, json]
            default: csv
      responses:
        "200":
          description: Exported audit logs
          content:
            text/csv:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AuditLog"
  /admin/feature-flags/rollout:
    post:
      summary: Roll out a feature flag
      tags: [Admin, Feature Flags]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FeatureFlagRolloutRequest"
      responses:
        "200":
          description: Feature flag rollout started
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
  /system/health/deep:
    get:
      summary: Deep system health check
      tags: [Health]
      responses:
        "200":
          description: Deep health check
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeepHealthStatus"
  /billing/invoices/{id}/adjust:
    post:
      summary: Adjust an invoice
      tags: [Billing, Invoices]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvoiceAdjustmentRequest"
      responses:
        "200":
          description: Invoice adjusted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
  /billing/payment-methods:
    post:
      summary: Add a payment method
      tags: [Billing, Payment Methods]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentMethodRequest"
      responses:
        "201":
          description: Payment method added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentMethod"
    get:
      summary: List payment methods
      tags: [Billing, Payment Methods]
      responses:
        "200":
          description: List of payment methods
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PaymentMethod"
  /billing/payment-methods/{id}:
    put:
      summary: Update a payment method
      tags: [Billing, Payment Methods]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentMethodRequest"
      responses:
        "200":
          description: Payment method updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentMethod"
    delete:
      summary: Delete a payment method
      tags: [Billing, Payment Methods]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Payment method deleted
  /billing/refunds:
    post:
      summary: Create a refund
      tags: [Billing, Refunds]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefundRequest"
      responses:
        "201":
          description: Refund created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Refund"
  /billing/credits:
    post:
      summary: Issue a credit
      tags: [Billing, Credits]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreditRequest"
      responses:
        "201":
          description: Credit issued
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credit"
  /billing/discounts:
    post:
      summary: Create a discount
      tags: [Billing, Discounts]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DiscountRequest"
      responses:
        "201":
          description: Discount created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Discount"
  /billing/coupons/redeem:
    post:
      summary: Redeem a coupon
      tags: [Billing, Coupons]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CouponRedemptionRequest"
      responses:
        "200":
          description: Coupon redeemed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Coupon"
  /cloud/providers/metadata:
    get:
      summary: Get cloud provider metadata
      tags: [Cloud]
      responses:
        "200":
          description: Cloud provider metadata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudProviderMetadata"
  /metrics:
    get:
      summary: Prometheus metrics endpoint
      tags: [Monitoring]
      responses:
        "200":
          description: Prometheus metrics
          content:
            text/plain:
              schema:
                type: string
  /rate-limit:
    get:
      summary: Get rate limit status
      tags: [Rate Limiting]
      responses:
        "200":
          description: Rate limit status
          content:
            application/json:
              schema:
                type: object
                properties:
                  limit:
                    type: integer
                  remaining:
                    type: integer
                  reset:
                    type: integer
  /logging:
    get:
      summary: Get logging configuration
      tags: [Logging]
      responses:
        "200":
          description: Logging config
          content:
            application/json:
              schema:
                type: object
                properties:
                  level:
                    type: string
                  format:
                    type: string
  /cors:
    get:
      summary: Get CORS configuration
      tags: [CORS]
      responses:
        "200":
          description: CORS config
          content:
            application/json:
              schema:
                type: object
                properties:
                  origins:
                    type: string
                  methods:
                    type: string
                  headers:
                    type: string
  /opa/authorize:
    post:
      summary: OPA authorization check
      tags: [Authz]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: string
                roles:
                  type: array
                  items:
                    type: string
                tenant:
                  type: string
                action:
                  type: string
                resource:
                  type: string
                context:
                  type: object
      responses:
        "200":
          description: Authorization result
          content:
            application/json:
              schema:
                type: object
                properties:
                  allow:
                    type: boolean
                  reason:
                    type: string
  /users/logout:
    post:
      summary: Logout user (invalidate refresh token)
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Successfully logged out
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /users/refresh:
    post:
      summary: Refresh JWT access token
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: New access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /users/forgot-password:
    post:
      summary: Request password reset email
      tags: [Auth]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
      responses:
        "204":
          description: Email sent
        "400":
          $ref: "#/components/responses/BadRequestError"

  /users/reset-password:
    post:
      summary: Reset password with token
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token, password]
              properties:
                token:
                  type: string
                password:
                  type: string
      responses:
        "204":
          description: Password reset
        "400":
          $ref: "#/components/responses/BadRequestError"

  /users/verify-email:
    post:
      summary: Verify email with token
      tags: [Auth]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token]
              properties:
                token:
                  type: string
      responses:
        "204":
          description: Email verified
        "400":
          $ref: "#/components/responses/BadRequestError"

  /users/resend-verification:
    post:
      summary: Resend verification email
      tags: [Auth]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
      responses:
        "204":
          description: Email sent
        "400":
          $ref: "#/components/responses/BadRequestError"

  /email/providers:
    post:
      summary: Add email provider
      tags: [Email]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailProvider"
      responses:
        "201":
          description: Provider added
        "400":
          $ref: "#/components/responses/BadRequestError"
    get:
      summary: List email providers
      tags: [Email]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of providers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EmailProvider"
  /email/providers/{name}:
    put:
      summary: Update email provider
      tags: [Email]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailProvider"
      responses:
        "200":
          description: Provider updated
        "400":
          $ref: "#/components/responses/BadRequestError"
    delete:
      summary: Remove email provider
      tags: [Email]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Provider removed
        "400":
          $ref: "#/components/responses/BadRequestError"
  /email/providers/{name}/test:
    post:
      summary: Test email provider connection
      tags: [Email]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Provider connection successful
        "400":
          $ref: "#/components/responses/BadRequestError"
  /email/templates:
    post:
      summary: Add email template
      tags: [Email]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailTemplate"
      responses:
        "201":
          description: Template added
        "400":
          $ref: "#/components/responses/BadRequestError"
    get:
      summary: List email templates
      tags: [Email]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EmailTemplate"
  /email/templates/{name}:
    put:
      summary: Update email template
      tags: [Email]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailTemplate"
      responses:
        "200":
          description: Template updated
        "400":
          $ref: "#/components/responses/BadRequestError"
    delete:
      summary: Remove email template
      tags: [Email]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Template removed
        "400":
          $ref: "#/components/responses/BadRequestError"
  /admin/projects/{id}/users:
    get:
      summary: List users in a project
      tags: [Admin, Projects, Users]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of users with roles/permissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserOrgProjectRole"

components:
  schemas:
    User:
      type: object
      required:
        - id
        - tenant_id
        - username
        - email
        - roles
        - attributes
        - created_at
        - updated_at
      properties:
        id:
          type: string
        tenant_id:
          type: string
        username:
          type: string
        email:
          type: string
        roles:
          type: array
          items:
            type: string
        attributes:
          type: object
          additionalProperties:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    UserRegister:
      type: object
      required:
        - username
        - email
        - password
        - tenant_id
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        tenant_id:
          type: string
    UserUpdate:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        roles:
          type: array
          items:
            type: string
        attributes:
          type: object
          additionalProperties:
            type: string
    UserLogin:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    EmailProvider:
      type: object
      required:
        - name
        - type
        - host
        - port
        - username
        - password
        - email_from
      properties:
        name:
          type: string
        type:
          type: string
        host:
          type: string
        port:
          type: integer
        username:
          type: string
        password:
          type: string
        email_from:
          type: string
    EmailTemplate:
      type: object
      required:
        - name
        - subject
        - body
      properties:
        name:
          type: string
        subject:
          type: string
        body:
          type: string
